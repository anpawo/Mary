type number2 = int | float;

struct empty {}

struct elem {
    data: any;
    next: empty | elem;
}

type list = elem | empty

/*
the ideal would be to have a typed list:

struct list <t> {
    data: t;
    next: empty | list;
}

*/

operator !! precedence 10 (list l, int index) -> null | any {
    if index < 0 then
    {
        return NULL;
    }
    else
    {
        if index == 0 then
        {
            return l.data;
        }
        else
        {
            return l.next !! (index - 1);
        }
    }
}

// need the operator to set a value of a struct
